// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ark

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetApiKeyCommon = "GetApiKey"

// GetApiKeyCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetApiKeyCommon operation. The "output" return
// value will be populated with the GetApiKeyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetApiKeyCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetApiKeyCommon Send returns without error.
//
// See GetApiKeyCommon for more information on using the GetApiKeyCommon
// API call, and error handling.
//
//    // Example sending a request using the GetApiKeyCommonRequest method.
//    req, resp := client.GetApiKeyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ARK) GetApiKeyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetApiKeyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetApiKeyCommon API operation for ARK.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ARK's
// API operation GetApiKeyCommon for usage and error information.
func (c *ARK) GetApiKeyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetApiKeyCommonRequest(input)
	return out, req.Send()
}

// GetApiKeyCommonWithContext is the same as GetApiKeyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetApiKeyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ARK) GetApiKeyCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetApiKeyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetApiKey = "GetApiKey"

// GetApiKeyRequest generates a "volcengine/request.Request" representing the
// client's request for the GetApiKey operation. The "output" return
// value will be populated with the GetApiKeyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetApiKeyCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetApiKeyCommon Send returns without error.
//
// See GetApiKey for more information on using the GetApiKey
// API call, and error handling.
//
//    // Example sending a request using the GetApiKeyRequest method.
//    req, resp := client.GetApiKeyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ARK) GetApiKeyRequest(input *GetApiKeyInput) (req *request.Request, output *GetApiKeyOutput) {
	op := &request.Operation{
		Name:       opGetApiKey,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetApiKeyInput{}
	}

	output = &GetApiKeyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetApiKey API operation for ARK.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ARK's
// API operation GetApiKey for usage and error information.
func (c *ARK) GetApiKey(input *GetApiKeyInput) (*GetApiKeyOutput, error) {
	req, out := c.GetApiKeyRequest(input)
	return out, req.Send()
}

// GetApiKeyWithContext is the same as GetApiKey with the addition of
// the ability to pass a context and additional request options.
//
// See GetApiKey for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ARK) GetApiKeyWithContext(ctx volcengine.Context, input *GetApiKeyInput, opts ...request.Option) (*GetApiKeyOutput, error) {
	req, out := c.GetApiKeyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetApiKeyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// DurationSeconds is a required field
	DurationSeconds *int32 `type:"int32" json:",omitempty" required:"true"`

	ProjectName *string `type:"string" json:",omitempty"`

	ResourceIds []*string `type:"list" json:",omitempty"`

	// ResourceType is a required field
	ResourceType *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GetApiKeyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetApiKeyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetApiKeyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetApiKeyInput"}
	if s.DurationSeconds == nil {
		invalidParams.Add(request.NewErrParamRequired("DurationSeconds"))
	}
	if s.ResourceType == nil {
		invalidParams.Add(request.NewErrParamRequired("ResourceType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDurationSeconds sets the DurationSeconds field's value.
func (s *GetApiKeyInput) SetDurationSeconds(v int32) *GetApiKeyInput {
	s.DurationSeconds = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *GetApiKeyInput) SetProjectName(v string) *GetApiKeyInput {
	s.ProjectName = &v
	return s
}

// SetResourceIds sets the ResourceIds field's value.
func (s *GetApiKeyInput) SetResourceIds(v []*string) *GetApiKeyInput {
	s.ResourceIds = v
	return s
}

// SetResourceType sets the ResourceType field's value.
func (s *GetApiKeyInput) SetResourceType(v string) *GetApiKeyInput {
	s.ResourceType = &v
	return s
}

type GetApiKeyOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ApiKey *string `type:"string" json:",omitempty"`

	ExpiredTime *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s GetApiKeyOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetApiKeyOutput) GoString() string {
	return s.String()
}

// SetApiKey sets the ApiKey field's value.
func (s *GetApiKeyOutput) SetApiKey(v string) *GetApiKeyOutput {
	s.ApiKey = &v
	return s
}

// SetExpiredTime sets the ExpiredTime field's value.
func (s *GetApiKeyOutput) SetExpiredTime(v int32) *GetApiKeyOutput {
	s.ExpiredTime = &v
	return s
}
